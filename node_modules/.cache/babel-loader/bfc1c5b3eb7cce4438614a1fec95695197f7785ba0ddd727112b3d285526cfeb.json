{"ast":null,"code":"import axios from \"axios\";\n\n// Base URL of backend API\naxios.defaults.baseURL = 'https://joshapp-backend-efcd8c73d793.herokuapp.com/';\naxios.defaults.withCredentials = true; // ✅ Allow credentials (cookies)\n\n// Request interceptor to include access token in headers\naxios.interceptors.request.use(config => {\n  const accessToken = localStorage.getItem(\"access_token\"); // ✅ Use stored token\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor to refresh token automatically\naxios.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem(\"refresh_token\");\n      if (!refreshToken) {\n        throw new Error(\"No refresh token found, redirecting to login\");\n      }\n      const {\n        data\n      } = await axios.post(\"dj-rest-auth/token/refresh/\", {\n        refresh: refreshToken\n      });\n      localStorage.setItem(\"access_token\", data.access);\n      localStorage.setItem(\"refresh_token\", data.refresh);\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${data.access}`;\n      originalRequest.headers[\"Authorization\"] = `Bearer ${data.access}`;\n      return axios(originalRequest);\n    } catch (refreshError) {\n      console.error(\"Token refresh failed, logging out\");\n      localStorage.removeItem(\"access_token\");\n      localStorage.removeItem(\"refresh_token\");\n      window.location.href = \"/login\";\n    }\n  }\n  return Promise.reject(error);\n});\nexport default axios;","map":{"version":3,"names":["axios","defaults","baseURL","withCredentials","interceptors","request","use","config","accessToken","localStorage","getItem","headers","Authorization","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","Error","data","post","refresh","setItem","access","common","refreshError","console","removeItem","window","location","href"],"sources":["/workspace/frontend-project5/src/api/axiosDefaults.js"],"sourcesContent":["import axios from \"axios\";\n\n// Base URL of backend API\naxios.defaults.baseURL = 'https://joshapp-backend-efcd8c73d793.herokuapp.com/';\naxios.defaults.withCredentials = true; // ✅ Allow credentials (cookies)\n\n// Request interceptor to include access token in headers\naxios.interceptors.request.use(\n  (config) => {\n    const accessToken = localStorage.getItem(\"access_token\");  // ✅ Use stored token\n    if (accessToken) {\n      config.headers.Authorization = `Bearer ${accessToken}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Response interceptor to refresh token automatically\naxios.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    \n    if (error.response && error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        const refreshToken = localStorage.getItem(\"refresh_token\");\n        if (!refreshToken) {\n          throw new Error(\"No refresh token found, redirecting to login\");\n        }\n\n        const { data } = await axios.post(\"dj-rest-auth/token/refresh/\", {\n          refresh: refreshToken\n        });\n\n        localStorage.setItem(\"access_token\", data.access);\n        localStorage.setItem(\"refresh_token\", data.refresh);\n\n        axios.defaults.headers.common[\"Authorization\"] = `Bearer ${data.access}`;\n        originalRequest.headers[\"Authorization\"] = `Bearer ${data.access}`;\n\n        return axios(originalRequest);\n      } catch (refreshError) {\n        console.error(\"Token refresh failed, logging out\");\n        localStorage.removeItem(\"access_token\");\n        localStorage.removeItem(\"refresh_token\");\n        window.location.href = \"/login\";\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default axios;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACAA,KAAK,CAACC,QAAQ,CAACC,OAAO,GAAG,qDAAqD;AAC9EF,KAAK,CAACC,QAAQ,CAACE,eAAe,GAAG,IAAI,CAAC,CAAC;;AAEvC;AACAH,KAAK,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC3BC,MAAM,IAAK;EACV,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAE;EAC3D,IAAIF,WAAW,EAAE;IACfD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAI,UAASJ,WAAY,EAAC;EACxD;EACA,OAAOD,MAAM;AACf,CAAC,EACAM,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CACjC;;AAED;AACAb,KAAK,CAACI,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC5BU,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EACf,MAAMI,eAAe,GAAGJ,KAAK,CAACN,MAAM;EAEpC,IAAIM,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC9EF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,IAAI;MACF,MAAMC,YAAY,GAAGX,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;MAC1D,IAAI,CAACU,YAAY,EAAE;QACjB,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;MACjE;MAEA,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMtB,KAAK,CAACuB,IAAI,CAAC,6BAA6B,EAAE;QAC/DC,OAAO,EAAEJ;MACX,CAAC,CAAC;MAEFX,YAAY,CAACgB,OAAO,CAAC,cAAc,EAAEH,IAAI,CAACI,MAAM,CAAC;MACjDjB,YAAY,CAACgB,OAAO,CAAC,eAAe,EAAEH,IAAI,CAACE,OAAO,CAAC;MAEnDxB,KAAK,CAACC,QAAQ,CAACU,OAAO,CAACgB,MAAM,CAAC,eAAe,CAAC,GAAI,UAASL,IAAI,CAACI,MAAO,EAAC;MACxET,eAAe,CAACN,OAAO,CAAC,eAAe,CAAC,GAAI,UAASW,IAAI,CAACI,MAAO,EAAC;MAElE,OAAO1B,KAAK,CAACiB,eAAe,CAAC;IAC/B,CAAC,CAAC,OAAOW,YAAY,EAAE;MACrBC,OAAO,CAAChB,KAAK,CAAC,mCAAmC,CAAC;MAClDJ,YAAY,CAACqB,UAAU,CAAC,cAAc,CAAC;MACvCrB,YAAY,CAACqB,UAAU,CAAC,eAAe,CAAC;MACxCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC;EACF;EACA,OAAOnB,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CACF;AAED,eAAeb,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}