{"ast":null,"code":"const reportWebVitals=onPerfEntry=>{if(onPerfEntry&&onPerfEntry instanceof Function){import('web-vitals').then(_ref=>{let{getCLS,getFID,getFCP,getLCP,getTTFB}=_ref;// Define a function to log metrics to analytics\nconst logToAnalytics=_ref2=>{let{name,delta}=_ref2;console.log(\"\".concat(name,\": \").concat(delta,\" ms\"));// Here you can send data to your analytics service\n};// Call logToAnalytics for each metric\ngetCLS(logToAnalytics);getFID(logToAnalytics);getFCP(logToAnalytics);getLCP(logToAnalytics);getTTFB(logToAnalytics);});}};export default reportWebVitals;","map":{"version":3,"names":["reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","logToAnalytics","_ref2","name","delta","console","log","concat"],"sources":["/workspace/frontend-project5/src/reportWebVitals.js"],"sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      // Define a function to log metrics to analytics\n      const logToAnalytics = ({ name, delta }) => {\n        console.log(`${name}: ${delta} ms`);\n        // Here you can send data to your analytics service\n      };\n\n      // Call logToAnalytics for each metric\n      getCLS(logToAnalytics);\n      getFID(logToAnalytics);\n      getFCP(logToAnalytics);\n      getLCP(logToAnalytics);\n      getTTFB(logToAnalytics);\n    });\n  }\n};\n\nexport default reportWebVitals;\n"],"mappings":"AAAA,KAAM,CAAAA,eAAe,CAAIC,WAAW,EAAK,CACvC,GAAIA,WAAW,EAAIA,WAAW,WAAY,CAAAC,QAAQ,CAAE,CAClD,MAAM,CAAC,YAAY,CAAC,CAACC,IAAI,CAACC,IAAA,EAAiD,IAAhD,CAAEC,MAAM,CAAEC,MAAM,CAAEC,MAAM,CAAEC,MAAM,CAAEC,OAAQ,CAAC,CAAAL,IAAA,CACpE;AACA,KAAM,CAAAM,cAAc,CAAGC,KAAA,EAAqB,IAApB,CAAEC,IAAI,CAAEC,KAAM,CAAC,CAAAF,KAAA,CACrCG,OAAO,CAACC,GAAG,IAAAC,MAAA,CAAIJ,IAAI,OAAAI,MAAA,CAAKH,KAAK,QAAM,CACnC;AACF,CAAC,CAED;AACAR,MAAM,CAACK,cAAc,CAAC,CACtBJ,MAAM,CAACI,cAAc,CAAC,CACtBH,MAAM,CAACG,cAAc,CAAC,CACtBF,MAAM,CAACE,cAAc,CAAC,CACtBD,OAAO,CAACC,cAAc,CAAC,CACzB,CAAC,CAAC,CACJ,CACF,CAAC,CAED,cAAe,CAAAV,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}