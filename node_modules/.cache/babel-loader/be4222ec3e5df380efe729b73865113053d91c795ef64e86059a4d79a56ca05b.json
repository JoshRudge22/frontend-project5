{"ast":null,"code":"import jwtDecode from \"jwt-decode\";\n\n// Function to set the token timestamp\nexport const setTokenTimestamp = data => {\n  if (!data || !data.refresh_token) {\n    console.error(\"Invalid data provided for setting token timestamp.\");\n    return;\n  }\n  try {\n    const refreshTokenTimestamp = jwtDecode(data.refresh_token).exp;\n    localStorage.setItem(\"refreshTokenTimestamp\", refreshTokenTimestamp);\n  } catch (error) {\n    console.error(\"Failed to decode refresh token:\", error);\n  }\n};\n\n// Function to check if the token should be refreshed\nexport const shouldRefreshToken = () => {\n  const refreshTokenTimestamp = localStorage.getItem(\"refreshTokenTimestamp\");\n  if (!refreshTokenTimestamp) {\n    return false;\n  }\n\n  // Check if the token is expired\n  const currentTime = Math.floor(Date.now() / 1000); // Current time in seconds\n  return refreshTokenTimestamp > currentTime;\n};\n\n// Function to remove the token timestamp\nexport const removeTokenTimestamp = () => {\n  localStorage.removeItem(\"refreshTokenTimestamp\");\n};\n\n// Example usage\nconst tokenData = {\n  refresh_token: \"your.jwt.refresh.token\"\n};\n\n// Set the token timestamp\nsetTokenTimestamp(tokenData);\n\n// Check if the token should be refreshed\nif (shouldRefreshToken()) {\n  console.log(\"Token should be refreshed.\");\n} else {\n  console.log(\"Token is valid or has expired.\");\n}\n\n// Remove the token timestamp if needed\nremoveTokenTimestamp();","map":{"version":3,"names":["jwtDecode","setTokenTimestamp","data","refresh_token","console","error","refreshTokenTimestamp","exp","localStorage","setItem","shouldRefreshToken","getItem","currentTime","Math","floor","Date","now","removeTokenTimestamp","removeItem","tokenData","log"],"sources":["/workspace/frontend-project5/src/utils/utils.js"],"sourcesContent":["import jwtDecode from \"jwt-decode\";\n\n// Function to set the token timestamp\nexport const setTokenTimestamp = (data) => {\n    if (!data || !data.refresh_token) {\n        console.error(\"Invalid data provided for setting token timestamp.\");\n        return;\n    }\n\n    try {\n        const refreshTokenTimestamp = jwtDecode(data.refresh_token).exp;\n        localStorage.setItem(\"refreshTokenTimestamp\", refreshTokenTimestamp);\n    } catch (error) {\n        console.error(\"Failed to decode refresh token:\", error);\n    }\n};\n\n// Function to check if the token should be refreshed\nexport const shouldRefreshToken = () => {\n    const refreshTokenTimestamp = localStorage.getItem(\"refreshTokenTimestamp\");\n    if (!refreshTokenTimestamp) {\n        return false;\n    }\n    \n    // Check if the token is expired\n    const currentTime = Math.floor(Date.now() / 1000); // Current time in seconds\n    return refreshTokenTimestamp > currentTime;\n};\n\n// Function to remove the token timestamp\nexport const removeTokenTimestamp = () => {\n    localStorage.removeItem(\"refreshTokenTimestamp\");\n};\n\n// Example usage\nconst tokenData = { refresh_token: \"your.jwt.refresh.token\" };\n\n// Set the token timestamp\nsetTokenTimestamp(tokenData);\n\n// Check if the token should be refreshed\nif (shouldRefreshToken()) {\n    console.log(\"Token should be refreshed.\");\n} else {\n    console.log(\"Token is valid or has expired.\");\n}\n\n// Remove the token timestamp if needed\nremoveTokenTimestamp();\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,YAAY;;AAElC;AACA,OAAO,MAAMC,iBAAiB,GAAIC,IAAI,IAAK;EACvC,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACC,aAAa,EAAE;IAC9BC,OAAO,CAACC,KAAK,CAAC,oDAAoD,CAAC;IACnE;EACJ;EAEA,IAAI;IACA,MAAMC,qBAAqB,GAAGN,SAAS,CAACE,IAAI,CAACC,aAAa,CAAC,CAACI,GAAG;IAC/DC,YAAY,CAACC,OAAO,CAAC,uBAAuB,EAAEH,qBAAqB,CAAC;EACxE,CAAC,CAAC,OAAOD,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;EAC3D;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,kBAAkB,GAAGA,CAAA,KAAM;EACpC,MAAMJ,qBAAqB,GAAGE,YAAY,CAACG,OAAO,CAAC,uBAAuB,CAAC;EAC3E,IAAI,CAACL,qBAAqB,EAAE;IACxB,OAAO,KAAK;EAChB;;EAEA;EACA,MAAMM,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;EACnD,OAAOV,qBAAqB,GAAGM,WAAW;AAC9C,CAAC;;AAED;AACA,OAAO,MAAMK,oBAAoB,GAAGA,CAAA,KAAM;EACtCT,YAAY,CAACU,UAAU,CAAC,uBAAuB,CAAC;AACpD,CAAC;;AAED;AACA,MAAMC,SAAS,GAAG;EAAEhB,aAAa,EAAE;AAAyB,CAAC;;AAE7D;AACAF,iBAAiB,CAACkB,SAAS,CAAC;;AAE5B;AACA,IAAIT,kBAAkB,EAAE,EAAE;EACtBN,OAAO,CAACgB,GAAG,CAAC,4BAA4B,CAAC;AAC7C,CAAC,MAAM;EACHhB,OAAO,CAACgB,GAAG,CAAC,gCAAgC,CAAC;AACjD;;AAEA;AACAH,oBAAoB,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}